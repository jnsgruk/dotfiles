#!/bin/bash
set -euo pipefail
# Output green message prefixed with [+]
_info() { echo -e "\e[92m[+] ${1:-}\e[0m"; }

GITHUB="https://github.com"
SRCHUT="https://git.sr.ht"
OS="$(grep -Po '^ID=\K.+$' /etc/os-release)"
export DEBIAN_FRONTEND="noninteractive"

_build_install_with_ninja() {
	meson build
	ninja -C build
	sudo ninja -C build install
}

_prep_src() {
	local name="$1"
	local repo="$2"
	local tag="$3"
	# Shift args and reconstruct the array from the rest of the args
	shift 3
	local deps=("$@")

	_info "Installing ${name}"
	# Install dependencies
	sudo apt-get install -y "${deps[@]}"
	# Remove any existing repo/checkout
	rm -rf "${HOME}/build/${name}"
	# Clone the correct version of the repo
	git clone -b "${tag}" "${repo}" "${HOME}/build/${name}"
	cd "${HOME}/build/${name}"
}

_build_install_kanshi() {
	SRC_NAME="kanshi"
	SRC_VERSION="v1.3.0"
	SRC_REPO="${SRCHUT}/~emersion/kanshi"
	SRC_DEPS=(
		build-essential
		cmake
		git
		libwayland-dev
		meson
		ninja-build
		pkg-config
		scdoc
		wayland-protocols
	)
	_prep_src "${SRC_NAME}" "${SRC_REPO}" "${SRC_VERSION}" "${SRC_DEPS[@]}"
	_build_install_with_ninja
}

_build_install_waybar() {
	SRC_NAME="waybar"
	SRC_VERSION="0.9.13"
	SRC_REPO="$GITHUB/Alexays/Waybar"
	SRC_DEPS=(
		build-essential
		clang-tidy
		cmake
		git
		gobject-introspection
		libdbusmenu-gtk3-dev
		libevdev-dev
		libfmt-dev
		libgirepository1.0-dev
		libgtk-3-dev
		libgtkmm-3.0-dev
		libinput-dev
		libjsoncpp-dev
		libmpdclient-dev
		libnl-3-dev
		libnl-genl-3-dev
		libpulse-dev
		libsigc++-2.0-dev
		libspdlog-dev
		libwayland-dev
		libxkbregistry-dev
		meson
		ninja-build
		pkg-config
		scdoc
		wayland-protocols
	)
	_prep_src "${SRC_NAME}" "${SRC_REPO}" "${SRC_VERSION}" "${SRC_DEPS[@]}"
	_build_install_with_ninja
}

_build_install_swaylock_effects() {
	SRC_NAME="swaylock-effects"
	SRC_VERSION="v1.6.10"
	SRC_REPO="$GITHUB/jirutka/swaylock-effects"
	SRC_DEPS=(
		bash-completion
		build-essential
		cmake
		git
		libcairo-dev
		libgdk-pixbuf2.0-dev
		libpam-dev
		libwayland-dev
		libxkbcommon-dev
		meson
		ninja-build
		pkg-config
		scdoc
		wayland-protocols
	)
	_prep_src "${SRC_NAME}" "${SRC_REPO}" "${SRC_VERSION}" "${SRC_DEPS[@]}"
	_build_install_with_ninja
}

_build_install_wlsunset() {
	SRC_NAME="wlsunset"
	SRC_VERSION="0.2.0"
	SRC_REPO="${SRCHUT}/~kennylevinsen/wlsunset"
	SRC_DEPS=(
		build-essential
		cmake
		git
		libwayland-dev
		meson
		ninja-build
		pkg-config
		scdoc
		wayland-protocols
	)
	_prep_src "${SRC_NAME}" "${SRC_REPO}" "${SRC_VERSION}" "${SRC_DEPS[@]}"
	_build_install_with_ninja
}

_build_install_xdg_desktop_portal_wlr() {
	SRC_NAME="xdg-desktop-portal-wlr"
	SRC_VERSION="v0.6.0"
	SRC_REPO="$GITHUB/emersion/xdg-desktop-portal-wlr"
	SRC_DEPS=(
		build-essential
		cmake
		git
		libdrm-dev
		libgbm-dev
		libinih-dev
		libpipewire-0.3-dev
		libsystemd-dev
		libwayland-dev
		meson
		ninja-build
		pkg-config
		scdoc
		wayland-protocols
		xdg-desktop-portal
	)
	_prep_src "${SRC_NAME}" "${SRC_REPO}" "${SRC_VERSION}" "${SRC_DEPS[@]}"
	_build_install_with_ninja
}

_build_install_swappy() {
	SRC_NAME="swappy"
	SRC_VERSION="v1.4.0"
	SRC_REPO="$GITHUB/jtheoof/swappy"
	SRC_DEPS=(
		build-essential
		cmake
		git
		libcairo-dev
		libgtk-3-dev
		libpango1.0-dev
		meson
		ninja-build
		pkg-config
		scdoc
		wayland-protocols
	)
	_prep_src "${SRC_NAME}" "${SRC_REPO}" "${SRC_VERSION}" "${SRC_DEPS[@]}"
	_build_install_with_ninja
}

_build_install_alacritty() {
	SRC_NAME="alacritty"
	SRC_VERSION="v0.10.1"
	SRC_REPO="$GITHUB/alacritty/alacritty.git"
	SRC_DEPS=(
		cargo
		desktop-file-utils
		git
		libfontconfig1-dev
		libfreetype6-dev
		libxcb-xfixes0-dev
		libxkbcommon-dev
		python3
	)
	_prep_src "${SRC_NAME}" "${SRC_REPO}" "${SRC_VERSION}" "${SRC_DEPS[@]}"

	cargo build --release

	# Install the terminfo profile
	sudo tic -xe alacritty,alacritty-direct extra/alacritty.info
	# Install alacritty and desktop file
	sudo cp target/release/alacritty /usr/local/bin
	sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg
	sudo desktop-file-install extra/linux/Alacritty.desktop
	sudo update-desktop-database
	# Install the man pages
	sudo mkdir -p /usr/local/share/man/man1
	gzip -c extra/alacritty.man | sudo tee /usr/local/share/man/man1/alacritty.1.gz >/dev/null
	gzip -c extra/alacritty-msg.man | sudo tee /usr/local/share/man/man1/alacritty-msg.1.gz >/dev/null
}

_build_install_avizo() {
	SRC_NAME="avizo"
	SRC_VERSION="1.2.1"
	SRC_REPO="$GITHUB/misterdanb/avizo.git"
	SRC_DEPS=(
		build-essential
		cmake
		cmake
		git
		libgirepository1.0-dev
		libgtk-3-dev
		libgtk-layer-shell-dev
		meson
		ninja-build
		pkg-config
		valac
	)
	_prep_src "${SRC_NAME}" "${SRC_REPO}" "${SRC_VERSION}" "${SRC_DEPS[@]}"
	_build_install_with_ninja
}

_build_install_pamixer() {
	SRC_NAME="pamixer"
	SRC_VERSION="1.6"
	SRC_REPO="$GITHUB/cdemoulins/pamixer.git"
	SRC_DEPS=(
		build-essential
		git
		libboost-program-options-dev
		libcxxopts-dev
		libpulse-dev
	)
	_prep_src "${SRC_NAME}" "${SRC_REPO}" "${SRC_VERSION}" "${SRC_DEPS[@]}"
	_build_install_with_ninja
}

_install_packages_ubuntu() {
	_info "Updating package cache"
	sudo apt-get update

	_info "Installing packages from the archives"
	sudo apt-get install -y \
		apparmor-utils \
		arc-theme \
		brightnessctl \
		eog \
		evince \
		gnome-disk-utility \
		gnome-sushi \
		golang \
		grim \
		mako-notifier \
		nautilus \
		papirus-icon-theme \
		pavucontrol \
		playerctl \
		policykit-1-gnome \
		slurp \
		sway \
		swayidle \
		v4l2loopback-dkms \
		v4l2loopback-utils \
		wf-recorder \
		wl-clipboard \
		wmctrl \
		xdg-desktop-portal

	# Needed for brightnessctl
	_info "Adding user '$USER' to 'input' and 'video' groups"
	sudo usermod -aG input "$USER"
	sudo usermod -aG video "$USER"

	_info "Installing clipman"
	go install github.com/yory8/clipman@latest

	_info "Installing ulauncher"
	sudo rm -rf /etc/apt/sources.list.d/agornostal-ubuntu-ulauncher*
	sudo add-apt-repository -n -y ppa:agornostal/ulauncher
	sudo apt-get install -y ulauncher

	# The following will only work on Ubuntu Jammy and onwards due to versions
	# of build tools and libraries.
	_build_install_avizo
	_build_install_kanshi
	_build_install_pamixer
	_build_install_swappy
	_build_install_swaylock_effects
	_build_install_waybar
	_build_install_wlsunset
	_build_install_xdg_desktop_portal_wlr
	_build_install_alacritty
}

_install_packages_arch() {
	_info "Installing packages"
	yay -S \
		alacritty \
		arc-gtk-theme \
		avizo \
		brightnessctl \
		clipman \
		eog \
		evince \
		gnome-disk-utility \
		grim \
		kanshi \
		mako \
		nautilus \
		pamixer \
		papirus-icon-theme \
		pavucontrol \
		playerctl \
		polkit-gnome \
		slurp \
		sushi \
		swappy \
		sway \
		swayidle \
		swaylock-effects \
		ulauncher \
		v4l2loopback-dkms \
		v4l2loopback-utils \
		waybar \
		wf-recorder \
		wl-clipboard \
		wlsunset \
		wmctrl \
		xdg-desktop-portal \
		xdg-desktop-portal-wlr
}

if [[ "$OS" == "ubuntu" ]]; then
	_install_packages_ubuntu
elif [[ "$OS" == "arch" ]]; then
	_install_packages_arch
fi
